#+TITLE: "pcap" the flag

* Example

#+begin_src shell :exports both :results output
./parse_cap net.cap | head -n20
#+end_src

#+begin_example
Magic Number: A1B2C3D4
Major Version: 2
Minor Version: 4
Snaplen: 1514
Linktype: 1
Packet: 0 	 Timestamp: 1473288256 	 Len: 78 	 Orig: 78
Eth Frame - Dest: 28608784E9C4 	 Src 1B2EDF605EA4 	 Len 8
Packet: 1 	 Timestamp: 1473288256 	 Len: 76 	 Orig: 76
Eth Frame - Dest: 1B2EDF605EA4 	 Src 28608784E9C4 	 Len 8
Packet: 2 	 Timestamp: 1473288256 	 Len: 78 	 Orig: 78
Eth Frame - Dest: 28608784E9C4 	 Src 1B2EDF605EA4 	 Len 8
Packet: 3 	 Timestamp: 1473288256 	 Len: 76 	 Orig: 76
Eth Frame - Dest: 1B2EDF605EA4 	 Src 28608784E9C4 	 Len 8
Packet: 4 	 Timestamp: 1473288256 	 Len: 78 	 Orig: 78
Eth Frame - Dest: 28608784E9C4 	 Src 1B2EDF605EA4 	 Len 8
Packet: 5 	 Timestamp: 1473288256 	 Len: 76 	 Orig: 76
Eth Frame - Dest: 1B2EDF605EA4 	 Src 28608784E9C4 	 Len 8
Packet: 6 	 Timestamp: 1473288256 	 Len: 78 	 Orig: 78
Eth Frame - Dest: 28608784E9C4 	 Src 1B2EDF605EA4 	 Len 8
Packet: 7 	 Timestamp: 1473288256 	 Len: 76 	 Orig: 76
#+end_example



* Structure of a cap file

A capture file begins with a File Header, followed by zero or more Packet Records, one per packet.

https://tools.ietf.org/id/draft-gharris-opsawg-pcap-00.html

** Header

The File Header has the following format:

#+begin_example
                           1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0 |                          Magic Number                         |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    4 |          Major Version        |         Minor Version         |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    8 |                           Reserved1                           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   12 |                           Reserved2                           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   16 |                            SnapLen                            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   20 | FCS |f|                   LinkType                            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
#+end_example


#+begin_quote
Magic Number (32 bits):

    an unsigned magic number, whose value is either the hexadecimal number 0xA1B2C3D4 or the hexadecimal number 0xA1B23C4D.
#+end_quote

#+begin_src shell :results raw
xxd -l 4 net.cap
#+end_src

#+RESULTS:
00000000: d4c3 b2a1                                ....

So far so good.

#+begin_quote
Major Version (16 bits):

    an unsigned value, giving the number of the current major version of the format. The value for the current version of the format is 2. This value should change if the format changes in such a way that code that reads the new format could not read the old format (i.e., code to read both formats would have to check the version number and use different code paths for the two formats) and code that reads the old format could not read the new format.

Minor Version (16 bits):

    an unsigned value, giving the number of the current minor version of the format. The value is for the current version of the format is 4. This value should change if the format changes in such a way that code that reads the new format could read the old format without checking the version number but code that reads the old format could not read all files in the new format.

Reserved1 (32 bits):

    not used - SHOULD be filled with 0 by pcap file writers, and MUST be ignored by pcap file readers. This value was documented by some older implementations as "gmt to local correction". Some older pcap file writers stored non-zero values in this field.

Reserved2 (32 bits):

    not used - SHOULD be filled with 0 by pcap file writers, and MUST be ignored by pcap file readers. This value was documented by some older implementations as "accuracy of timestamps". Some older pcap file writers stored non-zero values in this field.

SnapLen (32 bits):

    an unsigned value indicating the maximum number of octets captured from each packet. The portion of each packet that exceeds this value will not be stored in the file. This value MUST NOT be zero; if no limit was specified, the value should be a number greater than or equal to the largest packet length in the file.

LinkType (32 bits):

    an unsigned value that defines, in the lower 28 bits, the link layer type of packets in the file.

Frame Cyclic Sequence present (4 bits):

    if the "f" bit is set, then the FCS bits provide the number of bytes of FCS that are appended to each packet.

    valid values are between 0 and 7, with ethernet typically having a length of 4 bytes.
#+end_quote


* Let's start parsing

#+begin_src c :noweb yes :tangle parse_cap.c
#include <arpa/inet.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>

// I don't know what the maximum length I might want to read
// as part of parsing a cap file. But 2048 seems like a reasonable start.
// This is the buffer for the data of a single packet.
#define BUF_LEN 2048

// We can't know how many packets are in a cap file until
// we finish parsing it, so we'll have buffer of arbitrary size for that too.
#define PACKETS_BUF_LEN 8192

char buffer[BUF_LEN] = {0};

<<cap-related-structs>>
<<frame-type-identifiers>>
<<ethernet-frame>>

int num_packets = 0;
packetrec_t packets[PACKETS_BUF_LEN] = {0};

int main(int argc, char *argv[])
{
    if (argc != 2) {
        printf("Usage: parse_cap <filename>.\n");
        return 1;
    }

    <<open-file>>
    <<magic-number>>
    <<read-header>>

    for (int i = 0; i < PACKETS_BUF_LEN && lseek(fd, 0, SEEK_CUR) < f_stat.st_size; i++) {
        <<read-packet-to-buffer>>
    }
}
#+end_src

File-related code.

Get the size of the file using ~stat~ so we can know if we've read to the end.

#+begin_src c :noweb tangle :noweb-ref open-file
int fd = 0;

if ((fd = open(argv[1], O_RDONLY)) == -1) {
    fprintf(stderr, "open failed %m\n");
    return 1;
}

struct stat f_stat;
fstat(fd, &f_stat);
#+end_src


** Header

Even those this is a "network" capture file, the pcap spec says that the header and records are in the endianness of the computer that generates the data. This is because the dominant use case of cap files is single host writes/reads.

#+begin_src c :noweb-ref cap-related-structs
// Captured packet header
typedef struct caph_t {
    uint32_t magic_number;
    uint16_t major_version;
    uint16_t minor_version;
    uint32_t snaplen;
    uint32_t linktype;
} caph_t;
#+end_src

I couldn't find a description of "LinkType" values in that IETF page that describes the pcap format. I did find it at https://www.tcpdump.org/linktypes.html

#+begin_src c :noweb-ref magic-number
caph_t header = {0};
read(fd, &header.magic_number, 4);
read(fd, &header.major_version, 2);
read(fd, &header.minor_version, 2);
// Skip 64 bits of "reserved" that MUST be ignored.
lseek(fd, 8, SEEK_CUR);
read(fd, &header.snaplen, 4);
read(fd, &header.linktype, 4);
printf("Magic Number: %X\n", header.magic_number);
printf("Major Version: %hX\n", header.major_version);
printf("Minor Version: %hX\n", header.minor_version);
printf("Snaplen: %d\n", header.snaplen);
printf("Linktype: %X\n", header.linktype);
#+end_src

** Packet Records

A Packet Record is the standard container for storing the packets coming from the network.

#+begin_example
                          1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0 |                      Timestamp (Seconds)                      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    4 |            Timestamp (Microseconds or nanoseconds)            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    8 |                    Captured Packet Length                     |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   12 |                    Original Packet Length                     |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   16 /                                                               /
      /                          Packet Data                          /
      /                        variable length                        /
      /                                                               /
      +---------------------------------------------------------------+
#+end_example

When we create the struct to represent this packet record, I'm taking a moment to think about how to structure the packet data. I was initially thinking an array of uint8_t. But we won't know what the maximum length of the array should be until runtime when we parse the ~snaplen~ value from the file header. And then each packet might be a variable length below that max value of ~snaplen~. I could choose some arbitrarily large length. But I'd rather be explicit, precise, and have a good reason for the length I choose.

So, I'll ~malloc~ to a ~uint8_t~ with size of the captured packet length.

#+begin_src c :noweb-ref cap-related-structs
// Packet record
typedef struct packetrec_t {
    uint32_t timestamp_seconds;
    uint32_t timestamp_fractional;
    uint32_t cap_len;
    uint32_t orig_len;
    uint8_t *data;
} packetrec_t;
#+end_src


#+begin_src c :noweb-ref read-packet-to-buffer
read(fd, &packets[i].timestamp_seconds, 4);
read(fd, &packets[i].timestamp_fractional, 4);
read(fd, &packets[i].cap_len, 4);
read(fd, &packets[i].orig_len, 4);
packets[i].data = malloc(packets[i].cap_len * sizeof(uint8_t));
read(fd, packets[i].data, packets[i].cap_len);
printf("Packet: %d \t Timestamp: %d \t Len: %d \t Orig: %d\n", i, packets[i].timestamp_seconds, packets[i].cap_len, packets[i].orig_len);

ethernet_frame_t *frame = make_ethernet_frame(packets[i].data, packets[i].cap_len);
printf(
    "Eth Frame - Dest: %02X:%02X:%02X:%02X:%02X:%02X \t Src %02X:%02X:%02X:%02X:%02X:%02X \t Len %d \n",
    frame->dest_mac[0],
    frame->dest_mac[1],
    frame->dest_mac[2],
    frame->dest_mac[3],
    frame->dest_mac[4],
    frame->dest_mac[5],
    frame->src_mac[0],
    frame->src_mac[1],
    frame->src_mac[2],
    frame->src_mac[3],
    frame->src_mac[4],
    frame->src_mac[5],
    packets[i].cap_len
);
#+end_src


* Parsing an Ethernet frame

** Ethernet frame types

There's different types of ethernet frames. We can detect them by looking for certain bytes in the frame.

https://en.wikipedia.org/wiki/IEEE_802.1Q

#+ATTR_ORG: :width 800
[[file:./etherframe.png]]

#+begin_src c :noweb-ref frame-type-identifiers
uint8_t F_8021Q[2] = {0x81, 0x00};
uint8_t F_IPV4[2] = {0x08, 0x00};
uint8_t F_IPV6[2] = {0x86, 0xDD};
uint8_t F_ARP[2] = {0x08, 0x06};
#+end_src

** Ethernet frame struct

#+begin_src c :noweb-ref cap-related-structs
// Ethernet frame
typedef struct ethernet_frame_t {
    uint8_t dest_mac[6];
    uint8_t src_mac[6];
    uint8_t type_len[2];
    uint8_t *data;
    uint8_t fcs[4];
} ethernet_frame_t;
#+end_src

#+begin_src c :noweb-ref ethernet-frame
ethernet_frame_t *make_ethernet_frame(uint8_t *data, int size)
{
    ethernet_frame_t *frame = malloc(sizeof(ethernet_frame_t));
    memcpy(&(frame->dest_mac), data, 6);
    memcpy(&(frame->src_mac), data + 6, 6);
    memcpy(&(frame->type_len), data + 12, 2);
    if (memcmp(&(frame->type_len), F_IPV4, 2) == 0) {
        frame->data = malloc(size);
        memcpy(frame->data, data + 14, size);
    }
    memcpy(&(frame->fcs), data + 14 + size, 4);
    return frame;
}
#+end_src

* Build & Test

#+begin_src shell :results output
clang -d -o parse_cap parse_cap.c
./parse_cap net.cap
#+end_src

#+RESULTS:
: Magic Number: A1B2C3D4
: Major Version: 2
: Minor Version: 4
: Snaplen: 1514
: Linktype: 1
