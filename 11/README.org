#+TITLE: DNS Client
#+PROPERTY: header-args :exports yes

* Structure of ~main~

#+begin_src c :noweb yes :tangle dns.c
#include <arpa/inet.h>
#include <sys/socket.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <linux/in.h>
// arpa/inet.h has the inet_pton function which creates structs
// from the "presentation" representation of an address - "192.168.1.0".

// Arbitaritly chosen max receive buffer size
#define MAX_RECV 8192

<<qtypes>>

<<qclass>>

<<buffers>>

<<domain-helpers>>

int main(int argc, char *argv[])
{
    <<create-socket>>

    <<bind>>

    <<send>>

    <<receive>>
}
#+end_src

* Opening a socket

~socket~ returns an int - a file descriptor.

The main difference between sockets and files is that the operating system binds file descriptors to a file or device when the open() call creates the file descriptor. With sockets, application programs can choose to either specify the destination each time they use the socket - for example, when sending datagrams - or to bind the destination address to the socket.

#+begin_src c :noweb-ref create-socket
int socket_fd;

if ((socket_fd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
    perror("Error creating socket.");
#+end_src

* Binding a socket
- [ ] Question: Why are the socket and bind steps separated? When would you want to open a socket and not bind? How can you use a socket outside of a bind?

Here's the bind signature from ~man 2 bind~.

#+begin_example
#include <sys/socket.h>

int bind(int sockfd, const struct sockaddr *addr,
        socklen_t addrlen);
#+end_example

And the description states:

#+begin_example
The actual structure passed for the addr argument will depend on the address family.  The sockaddr structure is defined as something like:

    struct sockaddr {
        sa_family_t sa_family;
        char        sa_data[14];
    }
#+end_example

Beej's Guide to Networking explains ~sockaddr~, ~sa_family~, and ~sa_data~.

https://beej.us/guide/bgnet/html/#structs

#+begin_quote
sa_family can be a variety of things, but it’ll be AF_INET (IPv4) or AF_INET6 (IPv6) for everything we do in this document. sa_data contains a destination address and port number for the socket. This is rather unwieldy since you don’t want to tediously pack the address in the sa_data by hand.

To deal with struct sockaddr, programmers created a parallel structure: struct sockaddr_in (“in” for “Internet”) to be used with IPv4.

And this is the important bit: a pointer to a struct sockaddr_in can be cast to a pointer to a struct sockaddr and vice-versa. So even though connect() wants a struct sockaddr*, you can still use a struct sockaddr_in and cast it at the last minute!
#+end_quote

#+begin_example
    // (IPv4 only--see struct sockaddr_in6 for IPv6)

    struct sockaddr_in {
        short int          sin_family;  // Address family, AF_INET
        unsigned short int sin_port;    // Port number
        struct in_addr     sin_addr;    // Internet address
        unsigned char      sin_zero[8]; // Same size as struct sockaddr
    };
#+end_example

#+begin_src c :noweb-ref bind :exports yes
struct sockaddr_in addr = {
    .sin_family = AF_INET,
    .sin_port = htons(53),
    .sin_addr = {0}, // Will create later with inet_pton.
    .sin_zero = {0}
};

if (inet_pton(AF_INET, argv[1], &addr.sin_addr) != 1) {
    printf("inet_pton error\n");
    exit(EXIT_FAILURE);
}
#+end_src

- [ ] Question: Beej describes ~sockaddr_in~ as having a ~sin_zero~ field. The ~linux/in.h~ header has a ~__pad~ field but then a ~#define sin_zero __pad~ right after it. Are struct field names global? How does ~#define~ work? If I use ~.sin_zero = {0}~ in a struct initialization, will ~sin_zero~ be replaced by ~__pad~?

* DNS query message format

Pulling from https://datatracker.ietf.org/doc/html/rfc1035

The entire message looks like this:

#+begin_example
All communications inside of the domain protocol are carried in a single
format called a message.  The top level format of message is divided
into 5 sections (some of which are empty in certain cases) shown below:

    +---------------------+
    |        Header       |
    +---------------------+
    |       Question      | the question for the name server
    +---------------------+
    |        Answer       | RRs answering the question
    +---------------------+
    |      Authority      | RRs pointing toward an authority
    +---------------------+
    |      Additional     | RRs holding additional information
    +---------------------+
#+end_example

Our first concern is to build the request, so we'll focus on the header and question sections.

** Header

#+begin_example
4.1.1. Header section format

The header contains the following fields:

                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      ID                       |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    QDCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ANCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    NSCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ARCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

where:

ID              A 16 bit identifier assigned by the program that
                generates any kind of query.  This identifier is copied
                the corresponding reply and can be used by the requester
                to match up replies to outstanding queries.

QR              A one bit field that specifies whether this message is a
                query (0), or a response (1).

OPCODE          A four bit field that specifies kind of query in this
                message.  This value is set by the originator of a query
                and copied into the response.  The values are:

                0               a standard query (QUERY)

                1               an inverse query (IQUERY)

                2               a server status request (STATUS)

                3-15            reserved for future use
#+end_example

Our ID can be 0x0000. Our first iteration of this ~dig~ program will only be sending one request per run of the process.

We'll use a QR of 0 since we'll be making queries.

OPCODE will be 0, standard query.

Bits 5-8 are either optional or related to responses, so we can ignore those for now.

#+begin_example
Z               Reserved for future use.  Must be zero in all queries
                and responses.

RCODE           Response code - this 4 bit field is set as part of
                responses.  The values have the following
                interpretation:

                0               No error condition

                1               Format error - The name server was
                                unable to interpret the query.

                2               Server failure - The name server was
                                unable to process this query due to a
                                problem with the name server.

                3               Name Error - Meaningful only for
                                responses from an authoritative name
                                server, this code signifies that the
                                domain name referenced in the query does
                                not exist.

                4               Not Implemented - The name server does
                                not support the requested kind of query.

                5               Refused - The name server refuses to
                                perform the specified operation for
                                policy reasons.  For example, a name
                                server may not wish to provide the
                                information to the particular requester,
                                or a name server may not wish to perform
                                a particular operation (e.g., zone

RFC 1035        Domain Implementation and Specification    November 1987


                                transfer) for particular data.

                6-15            Reserved for future use.

QDCOUNT         an unsigned 16 bit integer specifying the number of
                entries in the question section.

ANCOUNT         an unsigned 16 bit integer specifying the number of
                resource records in the answer section.

NSCOUNT         an unsigned 16 bit integer specifying the number of name
                server resource records in the authority records
                section.

ARCOUNT         an unsigned 16 bit integer specifying the number of
                resource records in the additional records section.
#+end_example

Z must be zeroed. RCODE is for responses.

QDCOUNT will probably be 0x0001 since our first iteration will only support asking for a single domain.

And that should be it for the header.

#+begin_src c :noweb-ref header-struct
struct header_t {
    uint16_t id;
    uint16_t qr : 1;
    uint16_t opcode : 4;
    uint16_t aa : 1;
    uint16_t tc : 1;
    uint16_t rd : 1;
    uint16_t ra : 1;
    uint16_t z : 3;
    uint16_t rcode : 4;
    uint16_t qdcount;
    uint16_t ancount;
    uint16_t nscount;
    uint16_t arcount;
} req_header, res_header;

req_header = (struct header_t) {
    .id = 0,
    .qr = 0,
    .opcode = 0,
    .qdcount = htons(1)
};
#+end_src

** Question section

The ~QNAME~ part below was kind of confusing. It's described as "a sequence of labels", but what is a label? Is "google.com" a label?

Looking at a Wireshark request, I figured out "google" is a label, and "com" is a label. And the labels are separated by octets of their length. So the ~QNAME~ field for "google.com" would look like ~6 g o o g l e 3 c o m~.

#+begin_example
The question section is used to carry the "question" in most queries,
i.e., the parameters that define what is being asked.  The section
contains QDCOUNT (usually 1) entries, each of the following format:

                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                     QNAME                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     QTYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     QCLASS                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

where:

QNAME           a domain name represented as a sequence of labels, where
                each label consists of a length octet followed by that
                number of octets.  The domain name terminates with the
                zero length octet for the null label of the root.  Note
                that this field may be an odd number of octets; no
                padding is used.

QTYPE           a two octet code which specifies the type of the query.
                The values for this field include all codes valid for a
                TYPE field, together with some more general codes which
                can match more than one type of RR.



Mockapetris                                                    [Page 28]


RFC 1035        Domain Implementation and Specification    November 1987


QCLASS          a two octet code that specifies the class of the query.
                For example, the QCLASS field is IN for the Internet.
#+end_example

#+begin_src c :noweb-ref question :noweb yes
struct question_t {
    char *qname;
    uint16_t qtype;
    uint16_t qclass;
} question;

<<qname>>

question.qname = qname;
question.qtype = htons(A);
question.qclass = htons(IN);
#+end_src

*** Converting a domain name to the QNAME field

#+begin_src c :noweb-ref qname
int qname_len = 2 + strlen(argv[2]);
char *qname = malloc(qname_len);
int i, j, b;
for (i = 0, j = 0, b = 0; i < strlen(argv[2]); i++, j++) {
    if (argv[2][i] == '.') {
        qname[b++] = j;
        memcpy(&qname[b], &argv[2][i - j], j);
        b += j;
        j = -1;
    }
}
qname[b++] = j;
memcpy(&qname[b], &argv[2][i - j], j);
qname[++i] = '\0';
#+end_src

*** QTYPES

#+begin_src c :noweb-ref qtypes
#define A 0x01
#define NS 0x02
#define MD 0x03
#define MF 0x04
#define CNAME 0x05
#define SOA 0x06
#define MB 0x07
#define MX 0x15
#define TXT 0x16
#+end_src

*** QCLASS

#+begin_src c :noweb-ref qclass
#define IN 0x01
#define CS 0x02
#define CH 0x03
#define HS 0x04
#+end_src

* Request

#+begin_src c :noweb-ref request
struct request_t {
    struct header_t header;
    struct question_t question;
} request;

request = (struct request_t) {
    .header = req_header,
    .question = question
};
#+end_src
* Send

The ~question~ struct we have above has a ~qname~ field that is a pointer, because we can't know how long the domain name is until the program starts, so we have to point to some memory that
we ~malloc~ at runtime.

Therefore, we can't just concatenate the ~header~ struct with the ~question~ struct and send it over the wire. The ~header~ would be fine, because it doesn't contain any pointers. But for ~question.qname~, we need to dereference the pointer and put the bytes into the message.

#+begin_src c :noweb-ref send :noweb yes
<<header-struct>>

int sent;

<<question>>
<<request>>

// Pack the header and question into a buffer to send.
// Header + Question - Pointer + QNAME
int message_size = sizeof(struct request_t) - sizeof(void *) + qname_len;
uint8_t *request_msg = malloc(message_size);
memcpy(request_msg, &req_header, sizeof(struct header_t));
request_msg += sizeof(struct header_t);
memcpy(request_msg, question.qname, qname_len);
request_msg += qname_len;
memcpy(request_msg, &question.qtype, 2 * sizeof(uint16_t));
request_msg -= sizeof(struct header_t) + qname_len;

sent = sendto(
    socket_fd,
    request_msg,
    sizeof(struct request_t) - sizeof(void *) + qname_len,
    0,
    (struct sockaddr *) &addr,
    sizeof(struct sockaddr_in)
);
if (sent == -1)
    perror("sendto");
else
    printf("Sent %d bytes to %s:%d by way of file descriptor %d\n", sent, inet_ntoa(addr.sin_addr), addr.sin_port, socket_fd);
#+end_src

* Decoding the response

#+begin_src c :noweb-ref receive :noweb yes
uint8_t receive_buffer[MAX_RECV];

struct sockaddr_in addr_response = {
    .sin_family = AF_INET,
    .sin_port = 0,
    .sin_addr = {0}, // Will create later with inet_pton.
    .sin_zero = {0}
};
socklen_t addrlen = sizeof(addr_response);

int received_len = recvfrom(
    socket_fd,
    receive_buffer,
    MAX_RECV,
    0,
    (struct sockaddr *)&addr_response,
    &addrlen
);

printf("Received %d bytes from %s\n", received_len, inet_ntoa(addr_response.sin_addr));
for (int i = 0; i < received_len; i++) {
    if (i % 16 == 0)
        printf("\n 0x%02X\t", i);
    printf("%02x ", receive_buffer[i]);
}
printf("\n");

<<response-header>>
#+end_src

** Response header

I know the first 4 octets are mandatory, so rather than copy in each field one at a time, I'll just copy the
first 4 octets of the receive buffer into the first 4 octets of the res_header. The address of the first byte
of the res_header will just be ~&res_header~.

#+begin_src c :noweb-ref response-header
memcpy(&res_header, receive_buffer, 4);
#+end_src

The answer count field starts at octect 6. Ah. But this is a 16 bit short that I need to read
back in with network-to-host byte-order conversion.

The first record always starts at the 12th octet.

#+begin_src c :noweb-ref response-header
res_header.ancount = ntohs(*((uint16_t *) (receive_buffer + 6)));

char *domain = dnstop(receive_buffer + 12);
printf("Found answer for domain %s.\n", domain);
for (int i = 0; i < res_header.ancount; i++) {

}
#+end_src

** Resource records

The structure of the answer is going to be very similar to the structure of the question so I can write this code in a way where both can share. Both are comprised of a name, type, and class. The name is the domain name where each dot-separated segment is prefixed with a byte specifying the length of the segment.

A useful note when parsing headers is that response types can be up to 15, so the first octet of type will always be 0x00.

#+begin_example
The answer, authority, and additional sections all share the same
format: a variable number of resource records, where the number of
records is specified in the corresponding count field in the header.
Each resource record has the following format:
                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                                               /
    /                      NAME                     /
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     CLASS                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TTL                      |
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                   RDLENGTH                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
    /                     RDATA                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

where:

NAME            a domain name to which this resource record pertains.

TYPE            two octets containing one of the RR type codes.  This
                field specifies the meaning of the data in the RDATA
                field.

CLASS           two octets which specify the class of the data in the
                RDATA field.
#+end_example


#+begin_src c :noweb-ref :noweb-ref domain-helpers
/*
,** Naming this after the inet_pton functions - presentation to network -> presentation to dns.
,** Returne buffer will be length strlen(domain);
,*/
uint8_t *ptodns(char *domain)
{
    uint8_t *result = malloc(strlen(domain));
    int i, j;
    int end = strlen(domain);
    for (i = 0, j = 0; i < end; i++, j++) {
        if (domain[i] == '.') {
            ,*result = j;
            memcpy(++result, &domain[i - j], j);
            result += j;
            j = -1;
        }
    }
    ,*result = j;
    memcpy(++result, &domain[i - j], j);
    result += j;
    result -= i;
    return result;
}

char *dnstop(uint8_t *dnsname)
{
    int len = 0;
    while (dnsname[len])
        len++;
    char *domain = malloc(len * sizeof(char));
    int read, toread;
    read = toread = *dnsname++;
    memcpy(domain, dnsname, toread);
    dnsname += toread;
    toread = *dnsname++;
    while (toread) {
        domain += read;
        read = toread;
        *domain = '.';
        domain++;
        memcpy(domain, dnsname, toread);
        dnsname += toread;
        toread = *dnsname;
    }
    return domain - len + read + 1;
}
#+end_src
* Testing with ~socat~

I think I should be able to use the command below to listen locally for UDP on port 8888 and echo any messages received to stdout. But it's not working.

#+begin_src shell
socat -d -d -d - UDP4-LISTEN:8888,reuseaddr,fork
#+end_src

When I run ~./dns 127.0.0.1 Hello~ I just get ~Sent 5 bytes to 127.0.0.1:8888 by way of file descriptor 3~ from the program and no output from ~socat~.

* Debugging

Here's an example of my first iteration request.

#+begin_example
0000   00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00   ................
0010   a0 42 54 dc ab 55 00 00 01 00 01 00 00 00 00 00   .BT..U..........
#+end_example

I'm somehow losing the "google.com" QNAME encoding.

Here's an example of a successful request.

#+begin_example
0000   b8 27 eb 15 cf e0 ac 82 47 e2 87 ef 08 00 45 00   .'......G.....E.
0010   00 3d c2 c0 40 00 40 11 f1 ae c0 a8 02 b8 c0 a8   .=..@.@.........
0020   02 38 a4 19 00 35 00 29 86 7b 65 9e 01 00 00 01   .8...5.).{e.....
0030   00 00 00 00 00 00 04 70 6c 61 79 06 67 6f 6f 67   .......play.goog
0040   6c 65 03 63 6f 6d 00 00 01 00 01                  le.com.....
+end_example
